// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=7e9e1c1165
ROOST_METHOD_SIG_HASH=9f2c3de399


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;
  
  beforeAll(() => {
    telegram = new Telegram();
  });

  describe('getBusinessConnection', () => {
    test('should return a business connection when valid id is provided', async () => {
      const businessConnectionId = '123';
      const form = {};
      
      const mockRequest = jest.spyOn(telegram, '_request');
      mockRequest.mockResolvedValue({ id: businessConnectionId, name: 'Business Connection' });
      
      const businessConnection = await telegram.getBusinessConnection(businessConnectionId, form);

      expect(mockRequest).toHaveBeenCalledWith('getBusinessConnection', { form: { business_connection_id: businessConnectionId } });
      expect(businessConnection).toEqual({ id: businessConnectionId, name: 'Business Connection' });
    });

    test('should throw an error when invalid id is provided', async () => {
      const businessConnectionId = 'invalid-id';
      const form = {};

      const mockRequest = jest.spyOn(telegram, '_request');
      mockRequest.mockImplementation(() => {
        throw new Error('Invalid ID');
      });

      await expect(telegram.getBusinessConnection(businessConnectionId, form)).rejects.toThrow('Invalid ID');
      expect(mockRequest).toHaveBeenCalledWith('getBusinessConnection', { form: { business_connection_id: businessConnectionId } });
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });
});
