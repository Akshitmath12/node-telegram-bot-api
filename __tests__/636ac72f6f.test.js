// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=4d0dcd77e1
ROOST_METHOD_SIG_HASH=636ac72f6f


*/

// ********RoostGPT********
const telegram = require('./telegram');

describe('getUpdates method', () => {
  let form;

  beforeEach(() => {
    form = {};
  });

  test('should call _request with "getUpdates" and form', () => {
    const spy = jest.spyOn(telegram, '_request');
    telegram.getUpdates(form);
    expect(spy).toHaveBeenCalledWith('getUpdates', { form });
  });

  test('should throw deprecation warning when form is not an object', () => {
    const spy = jest.spyOn(global.console, 'warn');
    telegram.getUpdates('timeout', 'limit', 'offset');
    expect(spy).toHaveBeenCalledWith('The method signature getUpdates(timeout, limit, offset) has been deprecated since v0.25.0');
  });

  test('should convert arguments to form when form is not an object', () => {
    const args = ['timeout', 'limit', 'offset'];
    telegram.getUpdates(...args);
    expect(telegram.form).toEqual({ timeout: args[0], limit: args[1], offset: args[2] });
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });
});
