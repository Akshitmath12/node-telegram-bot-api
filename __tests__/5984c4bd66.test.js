// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=7cf99198e3
ROOST_METHOD_SIG_HASH=5984c4bd66


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('unbanChatSenderChat', () => {
  let telegram;
  let chatId;
  let senderChatId;
  let form;

  beforeEach(() => {
    telegram = new Telegram();
    chatId = 'sampleChatId';
    senderChatId = 'sampleSenderChatId';
    form = {};
  });

  test('should unban chat sender chat successfully', async () => {
    const expectedResponse = { success: true };
    telegram._request = jest.fn().mockResolvedValue(expectedResponse);

    const response = await telegram.unbanChatSenderChat(chatId, senderChatId, form);

    expect(response).toEqual(expectedResponse);
    expect(telegram._request).toHaveBeenCalledWith('unbanChatSenderChat', { form: { chat_id: chatId, sender_chat_id: senderChatId } });
  });

  test('should handle error when unbanning chat sender chat', async () => {
    const expectedError = new Error('Failed to unban chat sender chat');
    telegram._request = jest.fn().mockRejectedValue(expectedError);

    try {
      await telegram.unbanChatSenderChat(chatId, senderChatId, form);
    } catch (error) {
      expect(error).toEqual(expectedError);
    }

    expect(telegram._request).toHaveBeenCalledWith('unbanChatSenderChat', { form: { chat_id: chatId, sender_chat_id: senderChatId } });
  });
});
