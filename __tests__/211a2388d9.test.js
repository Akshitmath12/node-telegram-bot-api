// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=4c06bb1cd8
ROOST_METHOD_SIG_HASH=211a2388d9


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
  });

  describe('getUserProfilePhotos', () => {
    test('should return user profile photos when form is an object', async () => {
      const userId = 123;
      const form = { offset: 0, limit: 10 };

      telegram._request = jest.fn().mockResolvedValue('Mocked response');

      const result = await telegram.getUserProfilePhotos(userId, form);

      expect(telegram._request).toHaveBeenCalledWith('getUserProfilePhotos', { form: { user_id: userId, ...form } });
      expect(result).toBe('Mocked response');
    });

    test('should return user profile photos when form is not an object', async () => {
      const userId = 123;
      const offset = 0;
      const limit = 10;

      telegram._request = jest.fn().mockResolvedValue('Mocked response');

      const result = await telegram.getUserProfilePhotos(userId, offset, limit);

      expect(telegram._request).toHaveBeenCalledWith('getUserProfilePhotos', { form: { user_id: userId, offset, limit } });
      expect(result).toBe('Mocked response');
    });

    test('should throw an error when _request fails', async () => {
      const userId = 123;
      const form = { offset: 0, limit: 10 };

      telegram._request = jest.fn().mockRejectedValue(new Error('Mocked error'));

      await expect(telegram.getUserProfilePhotos(userId, form)).rejects.toThrow('Mocked error');
    });
  });
});
