// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=cefbf2598a
ROOST_METHOD_SIG_HASH=bca68682e5


*/

// ********RoostGPT********
// Importing the necessary modules
const Telegram = require('./telegram');

// Initializing a new instance of the Telegram class
const telegram = new Telegram();

describe("Testing _fixAddFileThumbnail method", () => {
    let options, opts;

    beforeEach(() => {
        options = { thumb: 'attach://photo' };
        opts = { formData: null };
    });

    test("Should add thumbnail to the formData if options.thumb is provided", () => {
        telegram._fixAddFileThumbnail(options, opts);
        expect(opts.formData).not.toBeNull();
        expect(opts.formData.photo).toBeDefined();
        expect(opts.qs.thumbnail).toBe('attach://photo');
    });

    test("Should not modify formData if options.thumb is not provided", () => {
        options.thumb = null;
        telegram._fixAddFileThumbnail(options, opts);
        expect(opts.formData).toBeNull();
    });

    test("Should handle the case if options.thumb is provided but formData is not null", () => {
        opts.formData = { someData: 'data' };
        telegram._fixAddFileThumbnail(options, opts);
        expect(opts.formData.someData).toBe('data');
        expect(opts.formData.photo).toBeDefined();
        expect(opts.qs.thumbnail).toBe('attach://photo');
    });
});
