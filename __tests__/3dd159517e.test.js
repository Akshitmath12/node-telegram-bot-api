// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=6684c9d234
ROOST_METHOD_SIG_HASH=3dd159517e


*/

// ********RoostGPT********
const Telegram = require('../src/telegram');

describe('Telegram constructor', () => {
  let instance;

  beforeEach(() => {
    instance = new Telegram('token');
  });

  test('should initialize with default options when no options are provided', () => {
    expect(instance.token).toBe('token');
    expect(instance.options.polling).toBe(false);
    expect(instance.options.webHook).toBe(false);
    expect(instance.options.baseApiUrl).toBe('https://api.telegram.org');
    expect(instance.options.filepath).toBe(true);
    expect(instance.options.badRejection).toBe(false);
    expect(instance._textRegexpCallbacks).toEqual([]);
    expect(instance._replyListenerId).toBe(0);
    expect(instance._replyListeners).toEqual([]);
    expect(instance._polling).toBe(null);
    expect(instance._webHook).toBe(null);
  });

  test('should initialize with provided options', () => {
    const options = {
      polling: true,
      webHook: true,
      baseApiUrl: 'https://custom.telegram.org',
      filepath: false,
      badRejection: true
    };
    instance = new Telegram('token', options);

    expect(instance.token).toBe('token');
    expect(instance.options).toEqual(options);
    expect(instance._polling).not.toBe(null);
    expect(instance._webHook).not.toBe(null);
  });

  test('should not start polling and webHook if autoStart and autoOpen are set to false', () => {
    const options = {
      polling: { autoStart: false },
      webHook: { autoOpen: false }
    };
    instance = new Telegram('token', options);

    expect(instance._polling).toBe(null);
    expect(instance._webHook).toBe(null);
  });
});
