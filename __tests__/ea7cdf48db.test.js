// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=fa02e366da
ROOST_METHOD_SIG_HASH=ea7cdf48db


*/

// ********RoostGPT********
const TelegramBot = require('../src/telegram');

describe('TelegramBot', () => {
  let bot;

  beforeAll(() => {
    bot = new TelegramBot();
  });

  describe('pinChatMessage', () => {
    test('should successfully pin a chat message', () => {
      const chatId = 123;
      const messageId = 456;
      const form = { disable_notification: true };

      bot._request = jest.fn().mockReturnValue(Promise.resolve(true));

      return bot.pinChatMessage(chatId, messageId, form)
        .then(result => {
          expect(result).toBe(true);
          expect(bot._request).toHaveBeenCalledWith('pinChatMessage', { form: { chat_id: chatId, message_id: messageId, disable_notification: true } });
        });
    });

    test('should fail when no chatId is provided', () => {
      expect(() => {
        bot.pinChatMessage();
      }).toThrow();
    });

    test('should fail when no messageId is provided', () => {
      expect(() => {
        bot.pinChatMessage(123);
      }).toThrow();
    });

    test('should handle request error', () => {
      const chatId = 123;
      const messageId = 456;
      const form = { disable_notification: true };

      bot._request = jest.fn().mockReturnValue(Promise.reject('Request error'));

      return bot.pinChatMessage(chatId, messageId, form)
        .catch(error => {
          expect(error).toBe('Request error');
        });
    });
  });
});
