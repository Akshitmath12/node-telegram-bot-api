// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=68399588e2
ROOST_METHOD_SIG_HASH=2016b6697e


*/

// ********RoostGPT********
const Telegram = require('../src/telegram');

describe('Telegram', () => {
  let telegram;

  beforeAll(() => {
    telegram = new Telegram();
  });

  describe('getUserChatBoosts', () => {
    test('should return user chat boosts', async () => {
      const chatId = 123;
      const userId = 456;
      const form = { someKey: 'someValue' };

      const expectedForm = { chat_id: chatId, user_id: userId, someKey: 'someValue' };
      jest.spyOn(telegram, '_request').mockReturnValue(Promise.resolve(expectedForm));

      const result = await telegram.getUserChatBoosts(chatId, userId, form);
      
      expect(telegram._request).toHaveBeenCalledWith('getUserChatBoosts', { form: expectedForm });
      expect(result).toEqual(expectedForm);
    });

    test('should throw an error if _request fails', async () => {
      const chatId = 123;
      const userId = 456;
      const form = { someKey: 'someValue' };

      jest.spyOn(telegram, '_request').mockReturnValue(Promise.reject(new Error('Request failed')));

      try {
        await telegram.getUserChatBoosts(chatId, userId, form);
      } catch (e) {
        expect(e).toEqual(new Error('Request failed'));
      }

      expect(telegram._request).toHaveBeenCalledWith('getUserChatBoosts', { form: { chat_id: chatId, user_id: userId, someKey: 'someValue' } });
    });
  });
});
