// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=f1d95a8d9d
ROOST_METHOD_SIG_HASH=4156244cfc


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram Module', () => {
  let telegram;

  beforeAll(() => {
    telegram = new Telegram();
  });

  test('should delete webhook successfully', () => {
    const form = { url: 'http://test.com' };
    telegram._request = jest.fn().mockResolvedValue({ ok: true });

    return telegram.deleteWebHook(form)
      .then(response => {
        expect(response).toEqual({ ok: true });
        expect(telegram._request).toHaveBeenCalledWith('deleteWebhook', { form });
      });
  });

  test('should throw error on delete webhook failure', () => {
    const form = { url: 'http://test.com' };
    telegram._request = jest.fn().mockRejectedValue(new Error('Failed to delete webhook'));

    return telegram.deleteWebHook(form)
      .catch(error => {
        expect(error).toEqual(new Error('Failed to delete webhook'));
        expect(telegram._request).toHaveBeenCalledWith('deleteWebhook', { form });
      });
  });

  test('should throw error on invalid form data', () => {
    const form = {};
    telegram._request = jest.fn().mockRejectedValue(new Error('Invalid form data'));

    return telegram.deleteWebHook(form)
      .catch(error => {
        expect(error).toEqual(new Error('Invalid form data'));
        expect(telegram._request).toHaveBeenCalledWith('deleteWebhook', { form });
      });
  });
});
