// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=b082ef1224
ROOST_METHOD_SIG_HASH=39acf9e369


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('setChatStickerSet', () => {
  let telegram;
  let chatId;
  let stickerSetName;
  let form;

  beforeEach(() => {
    telegram = new Telegram();
    chatId = '1234';
    stickerSetName = 'testStickerSet';
    form = {};
  });

  test('should set chat sticker set successfully', async () => {
    const spy = jest.spyOn(telegram, '_request').mockImplementation(() => Promise.resolve('Success'));
    const response = await telegram.setChatStickerSet(chatId, stickerSetName, form);
    expect(spy).toHaveBeenCalledWith('setChatStickerSet', { form: { chat_id: chatId, sticker_set_name: stickerSetName } });
    expect(response).toBe('Success');
  });

  test('should throw error when request fails', async () => {
    const spy = jest.spyOn(telegram, '_request').mockImplementation(() => Promise.reject(new Error('Request failed')));
    await expect(telegram.setChatStickerSet(chatId, stickerSetName, form)).rejects.toThrow('Request failed');
    expect(spy).toHaveBeenCalledWith('setChatStickerSet', { form: { chat_id: chatId, sticker_set_name: stickerSetName } });
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });
});
