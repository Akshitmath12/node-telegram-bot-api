// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=877acf3320
ROOST_METHOD_SIG_HASH=1c837ac9d6


*/

// ********RoostGPT********
// Importing required modules
const Telegram = require('./telegram');

// Creating instance of Telegram class
const telegram = new Telegram();

describe('Testing setChatDescription method in Telegram class', () => {
  
  // Test case for successful chat description change
  test('Should successfully set chat description', async () => {
    const chatId = 'testChatId';
    const description = 'testDescription';
    const form = {};

    const result = await telegram.setChatDescription(chatId, description, form);

    expect(result).toBeDefined();
    expect(result).toHaveProperty('ok', true);
    expect(result).toHaveProperty('result');
    expect(result.result).toHaveProperty('description', description);
  });

  // Test case for failure scenario when chatId is not provided
  test('Should throw an error when chatId is not provided', async () => {
    const description = 'testDescription';
    const form = {};

    await expect(telegram.setChatDescription(undefined, description, form)).rejects.toThrow('chatId is required');
  });

  // Test case for failure scenario when description is not provided
  test('Should throw an error when description is not provided', async () => {
    const chatId = 'testChatId';
    const form = {};

    await expect(telegram.setChatDescription(chatId, undefined, form)).rejects.toThrow('description is required');
  });

});
