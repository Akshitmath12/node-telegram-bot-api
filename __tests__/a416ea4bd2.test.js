// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=fe134afa0f
ROOST_METHOD_SIG_HASH=a416ea4bd2


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;
  
  beforeAll(() => {
    telegram = new Telegram();
  });

  describe('setMessageReaction', () => {
    test('should set message reaction successfully', async () => {
      const chatId = '12345';
      const messageId = '67890';
      const form = {
        reaction: { smile: true }
      };
      
      telegram._request = jest.fn().mockResolvedValue({ ok: true });

      const result = await telegram.setMessageReaction(chatId, messageId, form);
      
      expect(telegram._request).toHaveBeenCalledWith('setMessageReaction', {
        form: {
          chat_id: chatId,
          message_id: messageId,
          reaction: '{"smile":true}'
        }
      });
      expect(result).toEqual({ ok: true });
    });

    test('should throw an error when request fails', async () => {
      const chatId = '12345';
      const messageId = '67890';
      const form = {};
      
      telegram._request = jest.fn().mockRejectedValue(new Error('Request failed'));

      try {
        await telegram.setMessageReaction(chatId, messageId, form);
      } catch (error) {
        expect(telegram._request).toHaveBeenCalledWith('setMessageReaction', {
          form: {
            chat_id: chatId,
            message_id: messageId
          }
        });
        expect(error).toEqual(new Error('Request failed'));
      }
    });
  });
});
