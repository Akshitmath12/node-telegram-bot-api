// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=7bf399b6b8
ROOST_METHOD_SIG_HASH=9c0a004be0


*/

// ********RoostGPT********
const Telegram = require('../src/telegram');

describe('Telegram sendVideoNote method', () => {
  let telegram;
  let chatId;
  let videoNote;
  let options;
  let fileOptions;

  beforeEach(() => {
    telegram = new Telegram();
    chatId = '12345';
    videoNote = 'video_note';
    options = {};
    fileOptions = {};
    jest.spyOn(telegram, '_request');
    jest.spyOn(telegram, '_formatSendData').mockReturnValue([{}, 'video_note']);
    jest.spyOn(telegram, '_fixAddFileThumbnail');
  });

  it('should call _formatSendData with correct parameters', () => {
    telegram.sendVideoNote(chatId, videoNote, options, fileOptions);
    expect(telegram._formatSendData).toHaveBeenCalledWith('video_note', videoNote, fileOptions);
  });

  it('should call _request with correct parameters', () => {
    telegram.sendVideoNote(chatId, videoNote, options, fileOptions);
    expect(telegram._request).toHaveBeenCalledWith('sendVideoNote', expect.objectContaining({ qs: { chat_id: chatId, video_note: 'video_note' } }));
  });

  it('should call _fixAddFileThumbnail with correct parameters', () => {
    telegram.sendVideoNote(chatId, videoNote, options, fileOptions);
    expect(telegram._fixAddFileThumbnail).toHaveBeenCalledWith(options, expect.any(Object));
  });

  it('should handle error and return Promise reject', () => {
    const error = new Error('Failed to send video note');
    telegram._formatSendData.mockImplementationOnce(() => { throw error; });
    const result = telegram.sendVideoNote(chatId, videoNote, options, fileOptions);
    expect(result).toEqual(Promise.reject(error));
  });
});
