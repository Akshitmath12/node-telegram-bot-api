// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=18a91ed885
ROOST_METHOD_SIG_HASH=2de02b5b35


*/

// ********RoostGPT********
const TelegramBot = require('./telegram');
const nock = require('nock')

describe('getChatMember', () => {
  let bot;

  beforeEach(() => {
    bot = new TelegramBot('testToken');
    nock.cleanAll()
  });

  test('should return chat member info when valid chatId and userId provided', async () => {
    const chatId = 12345;
    const userId = 67890;
    const expectedResponse = {
      ok: true,
      result: {
        user: {
          id: userId,
          is_bot: false,
          first_name: 'Test',
        },
        status: 'member',
      },
    };

    nock('https://api.telegram.org')
      .post(`/bot${bot.token}/getChatMember`, {
        chat_id: chatId,
        user_id: userId,
      })
      .reply(200, expectedResponse);

    const response = await bot.getChatMember(chatId, userId);
    expect(response).toEqual(expectedResponse.result);
  });

  test('should throw an error when invalid chatId or userId provided', async () => {
    const chatId = 12345;
    const userId = 'invalidUserId';
    const expectedResponse = {
      ok: false,
      error_code: 400,
      description: 'Bad Request: USER_ID_INVALID',
    };

    nock('https://api.telegram.org')
      .post(`/bot${bot.token}/getChatMember`, {
        chat_id: chatId,
        user_id: userId,
      })
      .reply(400, expectedResponse);

    await expect(bot.getChatMember(chatId, userId)).rejects.toThrow('400');
  });
});
