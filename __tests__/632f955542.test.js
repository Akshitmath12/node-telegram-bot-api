// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=74a137a722
ROOST_METHOD_SIG_HASH=632f955542


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('setChatPhoto', () => {
  let telegram;
  let chatId;
  let photo;
  let options;
  let fileOptions;

  beforeEach(() => {
    telegram = new Telegram();
    chatId = '123456';
    photo = 'photo.jpg';
    options = {};
    fileOptions = {};
    telegram._request = jest.fn();
    telegram._formatSendData = jest.fn();
  });

  test('should successfully set chat photo', async () => {
    const expectedFormData = 'formData';
    const expectedPhoto = 'photo';

    telegram._formatSendData.mockReturnValue([expectedFormData, expectedPhoto]);

    await telegram.setChatPhoto(chatId, photo, options, fileOptions);

    expect(telegram._formatSendData).toHaveBeenCalledWith('photo', photo, fileOptions);
    expect(telegram._request).toHaveBeenCalledWith('setChatPhoto', { qs: { chat_id: chatId, photo: expectedPhoto }, formData: expectedFormData });
  });

  test('should reject with error when _formatSendData fails', async () => {
    const error = new Error('Failed to format send data');

    telegram._formatSendData.mockImplementation(() => {
      throw error;
    });

    await expect(telegram.setChatPhoto(chatId, photo, options, fileOptions)).rejects.toEqual(error);

    expect(telegram._formatSendData).toHaveBeenCalledWith('photo', photo, fileOptions);
    expect(telegram._request).not.toHaveBeenCalled();
  });
});
