// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=8bc5defedb
ROOST_METHOD_SIG_HASH=ca367c2318


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Testing sendDocument method in Telegram module', () => {
  let telegram;
  let chatId;
  let doc;
  let options;
  let fileOptions;

  beforeAll(() => {
    telegram = new Telegram();
    chatId = '123456';
    doc = 'testDocument';
    options = {};
    fileOptions = {};
  });

  test('sendDocument should return a Promise', () => {
    expect(telegram.sendDocument(chatId, doc, options, fileOptions)).toBeInstanceOf(Promise);
  });

  test('sendDocument should call _formatSendData method with correct parameters', () => {
    const formatSendDataSpy = jest.spyOn(telegram, '_formatSendData');
    telegram.sendDocument(chatId, doc, options, fileOptions);
    expect(formatSendDataSpy).toHaveBeenCalledWith('document', doc, fileOptions);
  });

  test('sendDocument should call _fixAddFileThumbnail method with correct parameters', () => {
    const fixAddFileThumbnailSpy = jest.spyOn(telegram, '_fixAddFileThumbnail');
    telegram.sendDocument(chatId, doc, options, fileOptions);
    expect(fixAddFileThumbnailSpy).toHaveBeenCalledWith(options, expect.any(Object));
  });

  test('sendDocument should call _request method with correct parameters', () => {
    const requestSpy = jest.spyOn(telegram, '_request');
    telegram.sendDocument(chatId, doc, options, fileOptions);
    expect(requestSpy).toHaveBeenCalledWith('sendDocument', expect.any(Object));
  });

  test('sendDocument should handle exception and return a rejected Promise', () => {
    const errorMsg = 'test error';
    jest.spyOn(telegram, '_formatSendData').mockImplementation(() => {
      throw new Error(errorMsg);
    });
    return expect(telegram.sendDocument(chatId, doc, options, fileOptions)).rejects.toThrow(errorMsg);
  });
});
