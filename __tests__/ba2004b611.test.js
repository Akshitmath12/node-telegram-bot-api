// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=fdebaf06ad
ROOST_METHOD_SIG_HASH=ba2004b611


*/

// ********RoostGPT********
const Errors = require('./errors');

describe('Errors class', () => {

  beforeEach(() => {
    // setup code if required
  });

  afterEach(() => {
    // cleanup code if required
  });

  test('should properly construct error object with provided code and message', () => {
    const code = 'TEST_CODE';
    const message = 'Test message';
    const error = new Errors(code, message);

    expect(error.code).toBe(code);
    expect(error.message).toBe(`${code}: ${message}`);
  });

  test('should properly construct error object even when code is not provided', () => {
    const message = 'Test message';
    const error = new Errors(undefined, message);

    expect(error.code).toBeUndefined();
    expect(error.message).toBe(`undefined: ${message}`);
  });

  test('should properly construct error object even when message is not provided', () => {
    const code = 'TEST_CODE';
    const error = new Errors(code);

    expect(error.code).toBe(code);
    expect(error.message).toBe(`${code}: `);
  });

  test('should properly construct error object even when code and message are not provided', () => {
    const error = new Errors();

    expect(error.code).toBeUndefined();
    expect(error.message).toBe('undefined: ');
  });
});
