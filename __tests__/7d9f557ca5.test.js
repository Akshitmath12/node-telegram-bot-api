// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=10d67180ba
ROOST_METHOD_SIG_HASH=7d9f557ca5


*/

// ********RoostGPT********
const TelegramBot = require('../src/telegram');

describe('TelegramBot', () => {
  let bot;

  beforeAll(() => {
    bot = new TelegramBot();
  });

  describe('banChatMember', () => {
    test('should successfully ban a member', async () => {
      const chatId = 12345;
      const userId = 67890;
      const form = { until_date: 1633651200 };

      const response = await bot.banChatMember(chatId, userId, form);

      expect(response).toHaveProperty('ok', true);
      expect(response).toHaveProperty('result');
      expect(response.result).toHaveProperty('chat');
      expect(response.result).toHaveProperty('user');
      expect(response.result).toHaveProperty('status', 'kicked');
    });

    test('should throw an error if chatId is not provided', async () => {
      const chatId = null;
      const userId = 67890;

      await expect(bot.banChatMember(chatId, userId)).rejects.toThrow('chatId is required');
    });

    test('should throw an error if userId is not provided', async () => {
      const chatId = 12345;
      const userId = null;

      await expect(bot.banChatMember(chatId, userId)).rejects.toThrow('userId is required');
    });
  });
});
