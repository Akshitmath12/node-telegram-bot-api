// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=10522f1c68
ROOST_METHOD_SIG_HASH=7cf76fea89


*/

// ********RoostGPT********
const Telegram = require('../src/telegram');

describe('Telegram', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
  });

  describe('unpinAllForumTopicMessages', () => {
    test('should unpin all forum topic messages successfully', async () => {
      const chatId = '12345';
      const messageThreadId = '67890';
      const form = {};

      // Mock the _request method
      telegram._request = jest.fn().mockResolvedValue(true);

      const result = await telegram.unpinAllForumTopicMessages(chatId, messageThreadId, form);

      expect(telegram._request).toHaveBeenCalledWith('unpinAllForumTopicMessages', { form: { chat_id: chatId, message_thread_id: messageThreadId } });
      expect(result).toBe(true);
    });

    test('should throw an error if the request fails', async () => {
      const chatId = '12345';
      const messageThreadId = '67890';
      const form = {};

      // Mock the _request method
      telegram._request = jest.fn().mockRejectedValue(new Error('Request failed'));

      await expect(telegram.unpinAllForumTopicMessages(chatId, messageThreadId, form)).rejects.toThrow('Request failed');
    });
  });
});
