// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=08292edde1
ROOST_METHOD_SIG_HASH=28fc05b1fd


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
  });

  describe('setMyDefaultAdministratorRights', () => {
    test('should return a request with the correct parameters', () => {
      const form = { can_change_info: true };
      const request = telegram._request = jest.fn();

      telegram.setMyDefaultAdministratorRights(form);

      expect(request).toHaveBeenCalledWith('setMyDefaultAdministratorRights', { form });
    });

    test('should throw an error if form is not an object', () => {
      expect(() => telegram.setMyDefaultAdministratorRights('notAnObject')).toThrow(TypeError);
    });

    test('should throw an error if form is null', () => {
      expect(() => telegram.setMyDefaultAdministratorRights(null)).toThrow(TypeError);
    });

    test('should return a request with an empty form if no form is provided', () => {
      const request = telegram._request = jest.fn();

      telegram.setMyDefaultAdministratorRights();

      expect(request).toHaveBeenCalledWith('setMyDefaultAdministratorRights', { form: {} });
    });
  });
});
