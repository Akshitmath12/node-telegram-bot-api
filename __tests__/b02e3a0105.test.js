// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=d7bc23c1ec
ROOST_METHOD_SIG_HASH=b02e3a0105


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;
  
  beforeAll(() => {
    telegram = new Telegram();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('unpinAllGeneralForumTopicMessages', () => {
    test('should successfully unpin all general forum topic messages', async () => {
      const chatId = '1234';
      const form = {};

      const _requestMock = jest.spyOn(telegram, '_request').mockResolvedValue(true);

      const result = await telegram.unpinAllGeneralForumTopicMessages(chatId, form);

      expect(_requestMock).toHaveBeenCalledWith('unhideGeneralForumTopic', { form: { chat_id: chatId } });
      expect(result).toBe(true);
    });

    test('should throw an error if the request is unsuccessful', async () => {
      const chatId = '1234';
      const form = {};

      const _requestMock = jest.spyOn(telegram, '_request').mockRejectedValue(new Error('Request failed'));

      try {
        await telegram.unpinAllGeneralForumTopicMessages(chatId, form);
      } catch (e) {
        expect(e).toEqual(new Error('Request failed'));
      }
      
      expect(_requestMock).toHaveBeenCalledWith('unhideGeneralForumTopic', { form: { chat_id: chatId } });
    });
  });
});
