// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=27b0b9ada0
ROOST_METHOD_SIG_HASH=91185d4678


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;

  beforeAll(() => {
    telegram = new Telegram();
  });

  describe('getMe', () => {
    test('should return data when form is passed', async () => {
      const form = { key: 'value' };
      telegram._request = jest.fn().mockReturnValue(Promise.resolve({ form }));

      const result = await telegram.getMe(form);

      expect(result).toEqual({ form });
      expect(telegram._request).toBeCalledWith('getMe', { form });
    });

    test('should return data when form is not passed', async () => {
      const form = {};
      telegram._request = jest.fn().mockReturnValue(Promise.resolve({ form }));

      const result = await telegram.getMe();

      expect(result).toEqual({ form });
      expect(telegram._request).toBeCalledWith('getMe', { form });
    });

    test('should throw error when request fails', async () => {
      const error = new Error('request failed');
      telegram._request = jest.fn().mockReturnValue(Promise.reject(error));

      await expect(telegram.getMe()).rejects.toThrow('request failed');
    });
  });
});
