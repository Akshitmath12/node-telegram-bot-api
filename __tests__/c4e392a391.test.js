// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=6c6f5e8c73
ROOST_METHOD_SIG_HASH=c4e392a391


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
  });

  describe('editMessageReplyMarkup', () => {
    test('should update reply markup correctly', async () => {
      const replyMarkup = { inline_keyboard: [[{ text: 'Test', callback_data: 'Test' }]] };
      const form = { chat_id: 1, message_id: 1 };

      telegram._request = jest.fn().mockResolvedValue({ result: true });

      const result = await telegram.editMessageReplyMarkup(replyMarkup, form);

      expect(result).toEqual({ result: true });
      expect(telegram._request).toHaveBeenCalledWith('editMessageReplyMarkup', { form: { ...form, reply_markup: replyMarkup } });
    });

    test('should throw error if request fails', async () => {
      const replyMarkup = { inline_keyboard: [[{ text: 'Test', callback_data: 'Test' }]] };
      const form = { chat_id: 1, message_id: 1 };

      telegram._request = jest.fn().mockRejectedValue(new Error('Request failed'));

      await expect(telegram.editMessageReplyMarkup(replyMarkup, form)).rejects.toThrow('Request failed');
      expect(telegram._request).toHaveBeenCalledWith('editMessageReplyMarkup', { form: { ...form, reply_markup: replyMarkup } });
    });
  });
});
