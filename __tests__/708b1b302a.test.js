// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=fb93b439ae
ROOST_METHOD_SIG_HASH=708b1b302a


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
  });

  describe('getMyDefaultAdministratorRights', () => {
    test('should return default administrator rights', async () => {
      const form = { admin: true, user: 'test' };
      telegram._request = jest.fn().mockResolvedValue({ admin: true, user: 'test' });

      const result = await telegram.getMyDefaultAdministratorRights(form);
      expect(result).toEqual({ admin: true, user: 'test' });
      expect(telegram._request).toHaveBeenCalledWith('getMyDefaultAdministratorRights', { form });
    });

    test('should throw an error if _request fails', async () => {
      const form = { admin: true, user: 'test' };
      telegram._request = jest.fn().mockRejectedValue(new Error('Request failed'));

      await expect(telegram.getMyDefaultAdministratorRights(form)).rejects.toThrow('Request failed');
      expect(telegram._request).toHaveBeenCalledWith('getMyDefaultAdministratorRights', { form });
    });
  });
});
