// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=2aa54458a6
ROOST_METHOD_SIG_HASH=fa5338c9f1


*/

// ********RoostGPT********
const { _fixEntitiesField } = require('./telegram');

describe('_fixEntitiesField method tests', () => {
  let obj;

  beforeEach(() => {
    obj = {
      entities: ['entity1', 'entity2'],
      caption_entities: ['caption1', 'caption2'],
      explanation_entities: ['explanation1', 'explanation2']
    };
  });

  test('should stringify entities field', () => {
    _fixEntitiesField(obj);
    expect(typeof obj.entities).toBe('string');
  });

  test('should stringify caption_entities field', () => {
    _fixEntitiesField(obj);
    expect(typeof obj.caption_entities).toBe('string');
  });

  test('should stringify explanation_entities field', () => {
    _fixEntitiesField(obj);
    expect(typeof obj.explanation_entities).toBe('string');
  });

  test('should not modify fields if they are already strings', () => {
    const strObj = {
      entities: 'entity1, entity2',
      caption_entities: 'caption1, caption2',
      explanation_entities: 'explanation1, explanation2'
    };
    _fixEntitiesField(strObj);
    expect(strObj.entities).toBe('entity1, entity2');
    expect(strObj.caption_entities).toBe('caption1, caption2');
    expect(strObj.explanation_entities).toBe('explanation1, explanation2');
  });

  test('should not throw error if fields are missing', () => {
    const missingFieldsObj = {};
    expect(() => _fixEntitiesField(missingFieldsObj)).not.toThrow();
  });
});
