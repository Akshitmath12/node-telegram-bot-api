// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=d7f20bef86
ROOST_METHOD_SIG_HASH=9611792f17


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
  });

  describe('answerCallbackQuery()', () => {
    test('should handle form as an object', () => {
      const callbackQueryId = '123';
      const form = { text: 'Hello', show_alert: true };

      telegram._request = jest.fn();

      telegram.answerCallbackQuery(callbackQueryId, form);

      expect(telegram._request).toHaveBeenCalledWith('answerCallbackQuery', { form: { ...form, callback_query_id: callbackQueryId } });
    });

    test('should handle callbackQueryId as an object', () => {
      const callbackQueryId = { text: 'Hello', show_alert: true };

      telegram._request = jest.fn();

      telegram.answerCallbackQuery(callbackQueryId);

      expect(telegram._request).toHaveBeenCalledWith('answerCallbackQuery', { form: callbackQueryId });
    });

    test('should throw an error if form is not an object', () => {
      const callbackQueryId = '123';
      const form = 'not an object';

      expect(() => {
        telegram.answerCallbackQuery(callbackQueryId, form);
      }).toThrow();
    });
  });
});
