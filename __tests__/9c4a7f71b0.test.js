// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=77ce363491
ROOST_METHOD_SIG_HASH=9c4a7f71b0


*/

// ********RoostGPT********
// Import the required modules
const Telegram = require('./telegram');

// Instantiate the Telegram class
const telegram = new Telegram();

// Test suite for getChatMenuButton method
describe('getChatMenuButton', () => {

  // Test case for successful request
  test('should return chat menu button with the given form', async () => {
    const form = { key: 'value' };

    // Mock the _request method to simulate a successful request
    telegram._request = jest.fn().mockResolvedValue({ result: 'success' });

    // Call the method with the form
    const response = await telegram.getChatMenuButton(form);

    // Expect the _request method to have been called with the correct arguments
    expect(telegram._request).toHaveBeenCalledWith('getChatMenuButton', { form });

    // Expect the response to be as expected
    expect(response).toEqual({ result: 'success' });
  });

  // Test case for request failure
  test('should throw an error when the request fails', async () => {
    const form = { key: 'value' };

    // Mock the _request method to simulate a request failure
    telegram._request = jest.fn().mockRejectedValue(new Error('Request failed'));

    try {
      // Call the method with the form
      await telegram.getChatMenuButton(form);
    } catch (error) {
      // Expect the _request method to have been called with the correct arguments
      expect(telegram._request).toHaveBeenCalledWith('getChatMenuButton', { form });

      // Expect the error to be as expected
      expect(error).toEqual(new Error('Request failed'));
    }
  });
});
