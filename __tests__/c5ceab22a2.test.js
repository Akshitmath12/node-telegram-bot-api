// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=836a38772b
ROOST_METHOD_SIG_HASH=c5ceab22a2


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('reopenGeneralForumTopic', () => {
  let telegram;
  let chatId;
  let form;

  beforeEach(() => {
    telegram = new Telegram();
    chatId = '123456';
    form = { message: 'Hello World' };
  });

  test('should reopen the general forum topic with provided chatId and form', async () => {
    const response = await telegram.reopenGeneralForumTopic(chatId, form);

    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(form.chat_id).toBe(chatId);
  });

  test('should throw an error if no chatId is provided', async () => {
    await expect(telegram.reopenGeneralForumTopic()).rejects.toThrow();
  });

  test('should throw an error if the chatId is not valid', async () => {
    const invalidChatId = 'abc';

    await expect(telegram.reopenGeneralForumTopic(invalidChatId, form)).rejects.toThrow();
  });

  test('should throw an error if the request fails', async () => {
    jest.spyOn(telegram, '_request').mockImplementation(() => Promise.reject(new Error('Request failed')));

    await expect(telegram.reopenGeneralForumTopic(chatId, form)).rejects.toThrow('Request failed');
  });
});
