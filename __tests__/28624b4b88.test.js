// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=6ffb462bbe
ROOST_METHOD_SIG_HASH=28624b4b88


*/

// ********RoostGPT********
const stream = require('stream');
const pump = require('pump');
const streamedRequest = require('streamed-request');
const Telegram = require('./telegram');

describe('getFileStream', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
    jest.spyOn(telegram, 'getFileLink').mockImplementation(() => Promise.resolve('fileURI'));
    jest.spyOn(streamedRequest, 'Object.assign').mockImplementation(() => 'streamedRequest');
  });

  test('should return a file stream', () => {
    const fileId = '123';
    const form = {};
    const fileStream = telegram.getFileStream(fileId, form);

    expect(fileStream).toBeInstanceOf(stream.PassThrough);
    expect(fileStream.path).toBe(fileId);
  });

  test('should emit info event with correct URI', done => {
    const fileId = '123';
    const form = {};
    const fileStream = telegram.getFileStream(fileId, form);

    fileStream.on('info', info => {
      expect(info.uri).toBe('fileURI');
      done();
    });
  });

  test('should emit error event when getFileLink promise is rejected', done => {
    const fileId = '123';
    const form = {};
    const error = new Error('getFileLink error');
    
    telegram.getFileLink.mockImplementationOnce(() => Promise.reject(error));
    const fileStream = telegram.getFileStream(fileId, form);

    fileStream.on('error', err => {
      expect(err).toBe(error);
      done();
    });
  });
});
