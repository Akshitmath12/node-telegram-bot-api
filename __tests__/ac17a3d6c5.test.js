// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=f7e0b8d551
ROOST_METHOD_SIG_HASH=ac17a3d6c5


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('sendPhoto method', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
    telegram._request = jest.fn();
    telegram._formatSendData = jest.fn();
  });

  test('should correctly send photo', () => {
    const chatId = '123';
    const photo = 'url/photo.jpg';
    const options = {};
    const fileOptions = {};

    const sendData = ['data', 'photo'];
    telegram._formatSendData.mockReturnValue(sendData);

    telegram.sendPhoto(chatId, photo, options, fileOptions);

    expect(telegram._formatSendData).toHaveBeenCalledWith('photo', photo, fileOptions);
    expect(telegram._request).toHaveBeenCalledWith('sendPhoto', {
      qs: {
        chat_id: chatId,
        photo: sendData[1],
      },
      formData: sendData[0],
    });
  });

  test('should reject promise when error occurs', () => {
    const chatId = '123';
    const photo = 'url/photo.jpg';
    const options = {};
    const fileOptions = {};

    const error = new Error('error');
    telegram._formatSendData.mockImplementation(() => {
      throw error;
    });

    return expect(telegram.sendPhoto(chatId, photo, options, fileOptions)).rejects.toBe(error);
  });
});
