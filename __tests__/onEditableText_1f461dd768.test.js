// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=onEditableText_03ca139d60
ROOST_METHOD_SIG_HASH=onEditableText_1f461dd768


*/

// ********RoostGPT********
const TelegramBot = require('node-telegram-bot-api');
const bot = new TelegramBot('YOUR_TELEGRAM_BOT_TOKEN', {polling: true});

// Test suite for the bot.onText method
describe('bot.onText', () => {
  let msg, opts;

  // Setup before each test
  beforeEach(() => {
    msg = {
      from: {
        id: '12345'
      },
      text: '/editable'
    };

    opts = {
      reply_markup: {
        inline_keyboard: [[{
          text: 'Edit Text',
          callback_data: 'edit'
        }]]
      }
    };
  });

  // Test case 1: Check if the bot sends a message with the correct parameters
  test('sends a message with correct parameters', () => {
    // Mock the bot.sendMessage method
    bot.sendMessage = jest.fn();

    // Call the method to test
    bot.onText(/\/editable/, function onEditableText(msg) {
      bot.sendMessage(msg.from.id, 'Original Text', opts);
    });

    // Trigger the event
    bot.emit('text', msg);

    // Assertion
    expect(bot.sendMessage).toHaveBeenCalledWith(msg.from.id, 'Original Text', opts);
  });

  // Test case 2: Check if the bot does not send a message when the command does not match
  test('does not send a message when command does not match', () => {
    // Mock the bot.sendMessage method
    bot.sendMessage = jest.fn();

    // Call the method to test with a different command
    bot.onText(/\/noteditable/, function onEditableText(msg) {
      bot.sendMessage(msg.from.id, 'Original Text', opts);
    });

    // Trigger the event
    bot.emit('text', msg);

    // Assertion
    expect(bot.sendMessage).not.toHaveBeenCalled();
  });
});
