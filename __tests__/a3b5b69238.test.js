// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=b7d1605915
ROOST_METHOD_SIG_HASH=a3b5b69238


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('sendAnimation method', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
    telegram._request = jest.fn();
    telegram._formatSendData = jest.fn();
  });

  test('should correctly send animation', () => {
    const chatId = '123';
    const animation = 'animationData';
    const options = { caption: 'test' };
    const fileOptions = {};

    const expectedSendData = ['formData', 'animationData'];
    telegram._formatSendData.mockReturnValue(expectedSendData);

    telegram.sendAnimation(chatId, animation, options, fileOptions);

    expect(telegram._formatSendData).toHaveBeenCalledWith('animation', animation, fileOptions);
    expect(telegram._request).toHaveBeenCalledWith('sendAnimation', {
      qs: {
        chat_id: chatId,
        caption: 'test',
        animation: 'animationData',
      },
      formData: 'formData',
    });
  });

  test('should reject promise when _formatSendData throws an error', async () => {
    const chatId = '123';
    const animation = 'animationData';
    const options = { caption: 'test' };
    const fileOptions = {};
    const error = new Error('Error');

    telegram._formatSendData.mockImplementation(() => {
      throw error;
    });

    await expect(telegram.sendAnimation(chatId, animation, options, fileOptions)).rejects.toEqual(error);
  });
});
