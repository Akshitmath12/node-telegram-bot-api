// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=56245983da
ROOST_METHOD_SIG_HASH=bdfe2d2934


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
  });

  describe('getForumTopicIconStickers', () => {
    test('should return stickers for a given chat ID', () => {
      const chatId = '12345';
      const form = {};
      const expectedResult = { success: true, stickers: ['sticker1', 'sticker2'] };

      telegram._request = jest.fn().mockReturnValue(expectedResult);

      const result = telegram.getForumTopicIconStickers(chatId, form);

      expect(result).toEqual(expectedResult);
      expect(telegram._request).toHaveBeenCalledWith('getForumTopicIconStickers', { form: { chat_id: chatId } });
    });

    test('should throw an error when chat ID is not provided', () => {
      const form = {};

      expect(() => {
        telegram.getForumTopicIconStickers(undefined, form);
      }).toThrow('Chat ID is required');
    });

    test('should throw an error when request fails', () => {
      const chatId = '12345';
      const form = {};
      const error = new Error('Request failed');

      telegram._request = jest.fn().mockImplementation(() => { throw error; });

      expect(() => {
        telegram.getForumTopicIconStickers(chatId, form);
      }).toThrow('Request failed');
    });
  });
});
