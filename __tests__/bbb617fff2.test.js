// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=8e8cff065d
ROOST_METHOD_SIG_HASH=bbb617fff2


*/

// ********RoostGPT********
const Telegram = require('../src/telegram');
const axios = require('axios');

jest.mock('axios');

describe('setChatPermissions', () => {
  let telegram;
  
  beforeAll(() => {
    telegram = new Telegram();
  });

  it('should set chat permissions successfully', async () => {
    const chatId = 12345;
    const chatPermissions = {
      can_send_messages: true,
      can_send_media_messages: true,
      can_send_polls: true,
      can_send_other_messages: true,
      can_add_web_page_previews: true,
    };
    
    const response = { data: { ok: true } };

    axios.post.mockResolvedValue(response);

    const result = await telegram.setChatPermissions(chatId, chatPermissions);

    expect(result).toEqual(response.data);
    expect(axios.post).toHaveBeenCalledWith('setChatPermissions', {
      chat_id: chatId,
      permissions: JSON.stringify(chatPermissions),
    });
  });

  it('should throw an error when request fails', async () => {
    const chatId = 12345;
    const chatPermissions = {
      can_send_messages: true,
      can_send_media_messages: true,
      can_send_polls: true,
      can_send_other_messages: true,
      can_add_web_page_previews: true,
    };
    
    const error = new Error('Network Error');

    axios.post.mockRejectedValue(error);

    await expect(telegram.setChatPermissions(chatId, chatPermissions)).rejects.toThrow('Network Error');
  });
});
