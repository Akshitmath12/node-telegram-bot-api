// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=3980aba30d
ROOST_METHOD_SIG_HASH=4afec7d8ae


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('copyMessages', () => {
  let telegram;

  beforeEach(() => {
    telegram = new Telegram();
    telegram._request = jest.fn();
  });

  test('should copy messages successfully', () => {
    const chatId = '1234';
    const fromChatId = '5678';
    const messageIds = ['1', '2', '3'];
    const form = {};

    telegram.copyMessages(chatId, fromChatId, messageIds, form);

    expect(telegram._request).toHaveBeenCalledWith('copyMessages', {
      form: {
        chat_id: chatId,
        from_chat_id: fromChatId,
        message_ids: JSON.stringify(messageIds),
      },
    });
  });

  test('should throw error when chatId is not provided', () => {
    expect(() => {
      telegram.copyMessages(undefined, '5678', ['1', '2', '3'], {});
    }).toThrow();
  });

  test('should throw error when fromChatId is not provided', () => {
    expect(() => {
      telegram.copyMessages('1234', undefined, ['1', '2', '3'], {});
    }).toThrow();
  });

  test('should throw error when messageIds is not provided', () => {
    expect(() => {
      telegram.copyMessages('1234', '5678', undefined, {});
    }).toThrow();
  });
});
