// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=de7f6d94c1
ROOST_METHOD_SIG_HASH=781616973b


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Telegram', () => {
  let telegram;

  beforeAll(() => {
    telegram = new Telegram();
  });

  describe('banChatSenderChat', () => {
    let chatId, senderChatId, form;

    beforeEach(() => {
      chatId = 123;
      senderChatId = 456;
      form = {};
    });

    test('should call _request with correct parameters', () => {
      const _requestMock = jest.spyOn(telegram, '_request');
      telegram.banChatSenderChat(chatId, senderChatId, form);
      expect(_requestMock).toHaveBeenCalledWith('banChatSenderChat', { form: { chat_id: chatId, sender_chat_id: senderChatId } });
    });

    test('should throw an error if chatId is not provided', () => {
      expect(() => {
        telegram.banChatSenderChat(undefined, senderChatId, form);
      }).toThrow();
    });

    test('should throw an error if senderChatId is not provided', () => {
      expect(() => {
        telegram.banChatSenderChat(chatId, undefined, form);
      }).toThrow();
    });

    test('should throw an error if form is not an object', () => {
      expect(() => {
        telegram.banChatSenderChat(chatId, senderChatId, 'not an object');
      }).toThrow();
    });
  });
});
