// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=486daf1941
ROOST_METHOD_SIG_HASH=a54845362c


*/

// ********RoostGPT********
const telegram = require('./telegram'); // assuming telegram.js is in the same directory
const stream = require('stream');
const fs = require('fs');
const path = require('path');
const URL = require('url');
const qs = require('querystring');
const mime = require('mime');
const fileType = require('file-type');
const errors = require('./errors'); // assuming errors.js is in the same directory

describe('telegram._formatSendData', () => {
  let type, data, fileOptions;

  beforeEach(() => {
    type = 'photo';
    data = Buffer.from([8, 6, 7, 5, 3, 0, 9]);
    fileOptions = {};
  });

  test('should handle stream data', () => {
    data = new stream.Readable();
    data.path = '/fakepath/photo.jpg';
    const result = telegram._formatSendData(type, data, fileOptions);
    expect(result[0][type].options.filename).toBe('photo.jpg');
  });

  test('should handle Buffer data', () => {
    const result = telegram._formatSendData(type, data, fileOptions);
    expect(result[0][type].options.filename).toBe('data');
  });

  test('should throw error for unsupported Buffer file-type', () => {
    process.env.NTBA_FIX_350 = false;
    data = Buffer.from([0, 0, 0, 0]);
    expect(() => telegram._formatSendData(type, data, fileOptions)).toThrow(errors.FatalError);
  });

  test('should handle file data', () => {
    data = path.resolve(__dirname, 'photo.jpg');
    fs.writeFileSync(data, 'fake data');
    const result = telegram._formatSendData(type, data, fileOptions);
    expect(result[0][type].options.filename).toBe('photo.jpg');
    fs.unlinkSync(data);
  });

  test('should handle non-file and non-buffer data', () => {
    data = 'non-file and non-buffer data';
    const result = telegram._formatSendData(type, data, fileOptions);
    expect(result).toEqual([null, data]);
  });

  test('should handle no data', () => {
    data = null;
    const result = telegram._formatSendData(type, data, fileOptions);
    expect(result).toEqual([null, data]);
  });
});
