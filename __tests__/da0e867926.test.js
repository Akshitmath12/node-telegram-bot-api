// ********RoostGPT********
/*
Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=4317d4b1a1
ROOST_METHOD_SIG_HASH=da0e867926


*/

// ********RoostGPT********
const Telegram = require('./telegram');

describe('Testing sendAudio method in Telegram module', () => {
  let telegram;
  let chatId;
  let audio;
  let options;
  let fileOptions;

  beforeAll(() => {
    telegram = new Telegram();
    chatId = '123456';
    audio = 'test_audio.mp3';
    options = { duration: 10, performer: 'John Doe', title: 'Test Audio' };
    fileOptions = { filename: 'test_audio.mp3' };
  });

  test('should send audio successfully', async () => {
    const spy = jest.spyOn(telegram, '_request').mockImplementation(() => Promise.resolve('Audio sent successfully'));
    const result = await telegram.sendAudio(chatId, audio, options, fileOptions);
    expect(result).toBe('Audio sent successfully');
    spy.mockRestore();
  });

  test('should handle errors when sending audio', async () => {
    const spy = jest.spyOn(telegram, '_request').mockImplementation(() => Promise.reject('Error sending audio'));
    try {
      await telegram.sendAudio(chatId, audio, options, fileOptions);
    } catch (error) {
      expect(error).toBe('Error sending audio');
    }
    spy.mockRestore();
  });

  test('should handle errors when formatting send data', async () => {
    const spy = jest.spyOn(telegram, '_formatSendData').mockImplementation(() => { throw new Error('Error formatting send data'); });
    try {
      await telegram.sendAudio(chatId, audio, options, fileOptions);
    } catch (error) {
      expect(error).toBeInstanceOf(Error);
      expect(error).toHaveProperty('message', 'Error formatting send data');
    }
    spy.mockRestore();
  });
});
